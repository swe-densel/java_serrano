package com.company.controllers;

import com.company.enums.DefinedPromo;
import com.company.models.Promo;
import com.company.models.SMS;
import com.company.utilities.DatabaseConnect;
import com.company.utilities.ReportGenerator;
import com.company.views.SMSView;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

//This project follows the Model-View-Controller (MVC) architecture
//This is the controller class used for requesting CRUD operations with the database
//and requesting logs to display in the view

public class SMSController {
    private static SMSController controllerInstance = null;
    private static SMSView smsView;
    final private static Logger logger = Logger.getLogger(SMSController.class.getName());

    //Made it into a Singleton cause I only need one instance of the controller
    //and the view
    public static SMSController getInstance(){
        if (controllerInstance == null){
            controllerInstance = new SMSController();
            smsView = new SMSView();
        }
        return controllerInstance;
    }

    //checks SMS by providing a map, requests the DB class to insert SMS
    //checks if the SMS entered is REGISTER to reply to the user
    public void sendSMS(SMS sms){
        sms.checkSMS(sms.getSmsMap());
        insertSMS(sms);

        if (sms.getPayload().equals("REGISTER")){
            receiveReplySMS(sms);
        }
    }

    //creates an SMS and displays it to reply to the user
    //requests the reply SMS to insert into the database
    private void receiveReplySMS(SMS sms) {
        SMS replySMS = new SMS(
                sms.getMsisdn(),
                sms.getSender(),
                sms.getRecipient(),
                sms.getShortCode(),
                null,
                "To complete the promo " +
                        "registration, please send " +
                        "Lastname, Firstname to " +
                        sms.getShortCode(),
                sms.getTimestamp(),
                sms.getStatusTag(),
                sms.getDefinedPromoTag()
        );

        insertSMS(replySMS);
        displaySMS(sms);
    }

    //logs out the reply to the user
    private void displaySMS(SMS sms){
        smsView.showResult(sms.getPayload());
    }

    //requests the database to insert the promo
    public void createPromo(Promo promo){
        smsView.showResult(DatabaseConnect.getInstance().insertPromo(promo));
    }

    //requests to insert the SMS, entered by the user, into the database
    private void insertSMS(SMS sms){
        DatabaseConnect.getInstance().insertSMS(sms);

        //because varchar cannot be autogenerated in SQL, I have to improvise
        //a function to update the transaction ID of the SMS
        //transactionID = promocode + autogenerated id
        Map<String, Object> idPromo = DatabaseConnect.getInstance().getIdPromo();
        DatabaseConnect.getInstance().updateTransactionID(idPromo);
    }

    //generates report.txt file
    public void generateReport(){

        //getting the list of SMS for each SMS type as defined in the SMS Manager
        DefinedPromo definedPromo = DefinedPromo.PROMO;

        ArrayList<SMS> dateList = DatabaseConnect.getInstance()
                .retrieveSMSByDate(
                        definedPromo.getFormattedStartDate(),
                        definedPromo.getFormattedEndDate()
                );

        ArrayList<SMS> msisdnList = DatabaseConnect.getInstance()
                .retrieveSMSByMsisdn("+639563026795");

        String[] msisdns = {"+639563026795", "+639771425863"};
        ArrayList<SMS> msisdnListList = DatabaseConnect.getInstance()
                .retrieveSMSByMsisdnList(msisdns);

        ArrayList<SMS> promoCodeList = DatabaseConnect.getInstance()
                .retrieveSMSbyPromoCode(definedPromo.getPromoCode());

        ArrayList<SMS> fromList = DatabaseConnect.getInstance()
                .retrieveSMSfromSystem("Pizza Place");

        ArrayList<SMS> toList = DatabaseConnect.getInstance()
                .retrieveSMSToSystem("Pizza Place");

        //FileHandler creates the report text file
        FileHandler handler = null;
        try {
            handler = new FileHandler("report.txt");
            logger.addHandler(handler);
            logger.setLevel(Level.INFO);

            //actual generation of reports as tasked in Lab 3.1.6
            //all of these functions just passes the logger
            // and results of ReportGenerator class
            generateFailedTransactions(promoCodeList);
            generateFailedTransactionsPerType(
                    dateList,
                    msisdnList,
                    msisdnListList,
                    promoCodeList,
                    fromList,
                    toList);
            generateSuccessfulTransactions(promoCodeList);
            generateSuccessfulTransactionsPerType(
                    dateList,
                    msisdnList,
                    msisdnListList,
                    promoCodeList,
                    fromList,
                    toList);
            generatePersons(promoCodeList);
            generateTotalCounts(fromList, toList);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void generateTotalCounts(ArrayList<SMS> fromList, ArrayList<SMS> toList) {
        //total received
        smsView.showResult("Total Count of SMS Received: " +
                ReportGenerator.getInstance()
                        .getTotalSMSReceived(toList), logger);

        //total sent
        smsView.showResult("Total Count of SMS Sent: " +
                ReportGenerator.getInstance()
                        .getTotalSMSSent(fromList), logger);
    }

    private void generatePersons(ArrayList<SMS> promoCodeList) {
        //list of persons who joined
        logger.log(Level.INFO, "\n---- LIST OF PERSONS JOINED ----\n");
        smsView.showPersonsResult(ReportGenerator.getInstance()
                .retrievePersons(promoCodeList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");
    }

    private void generateSuccessfulTransactionsPerType(ArrayList<SMS> dateList, ArrayList<SMS> msisdnList, ArrayList<SMS> msisdnListList, ArrayList<SMS> promoCodeList, ArrayList<SMS> fromList, ArrayList<SMS> toList) {
        //successful transactions per SMS type
        logger.log(Level.INFO, "\n-----SUCCESSFUL TRANSACTIONS BY DATE----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(dateList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----SUCCESSFUL TRANSACTIONS BY MSISDN----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(msisdnList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----SUCCESSFUL TRANSACTIONS BY MULTIPLE MSISDN ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(msisdnListList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----SUCCESSFUL TRANSACTIONS BY PROMOCODE ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(promoCodeList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS SENT BY SYSTEM ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(fromList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS RECEIVED BY SYSTEM ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(toList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");
    }

    private void generateSuccessfulTransactions(ArrayList<SMS> promoCodeList) {
        //all successful transactions
        logger.log(Level.INFO, "\n-----ALL SUCCESSFUL TRANSACTIONS----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveSuccessfulTransactions(promoCodeList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");
    }

    private void generateFailedTransactionsPerType(ArrayList<SMS> dateList, ArrayList<SMS> msisdnList, ArrayList<SMS> msisdnListList, ArrayList<SMS> promoCodeList, ArrayList<SMS> fromList, ArrayList<SMS> toList) {
        //failed transactions per SMS type
        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS BY DATE----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(dateList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS BY MSISDN----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(msisdnList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS BY MULTIPLE MSISDN ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(msisdnListList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS BY PROMOCODE ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(promoCodeList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS SENT BY SYSTEM ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(fromList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");

        logger.log(Level.INFO, "\n-----FAILED TRANSACTIONS RECEIVED BY SYSTEM ----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(toList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");
    }

    private void generateFailedTransactions(ArrayList<SMS> promoCodeList) {
        //all failed transactions
        logger.log(Level.INFO, "\n-----ALL FAILED TRANSACTIONS----\n");
        smsView.showSMSResult(ReportGenerator.getInstance()
                .retrieveFailedTransactions(promoCodeList), logger);
        logger.log(Level.INFO, "\n-------------------------------\n");
    }


}
